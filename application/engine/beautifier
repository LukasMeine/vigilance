#!/usr/bin/env node

/**
 * Module dependencies
 */
var Updater = require('../services/updater.js');
var app = require('./app');
var debug = require('debug')('code-beautifier:server');
var http = require('http');
var args = require('minimist')(process.argv.slice(2));
var fs = require('fs');
var log = require('captains-log')();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

fs.readFile('./application/includes/startup.txt', function(err, file) {

  var lines = file.toString().split('\n');
  for (var i = 0; i < lines.length; i++) {

    if(i <= 14)
    {
      log.info('              ' + lines[i]);
    }
    else {
      log.info( lines[i]);
    }

  }

  log.info(" Devmind.io local utilities is running at port " + port);
  log.info(" To shut down, press <CTRL> + C at any time.");
  console.log('');
});

if (typeof args.path !== "undefined") {
  var command_prepend = "cd " + args.path + " && echo %cd% &&";
}
else {
  var command_prepend = "";
}
let update = new Updater(command_prepend);
update.verify_git();

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}